package api

import (
	"net/http"

	"github.com/SkynetLabs/malware-scanner/database"
	"github.com/julienschmidt/httprouter"
	"gitlab.com/NebulousLabs/errors"
	skyapi "gitlab.com/SkynetLabs/skyd/node/api"
)

// healthGET returns the status of the service
func (api *API) healthGET(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	status := struct {
		DBAlive     bool `json:"dbAlive"`
		ClamAVAlive bool `json:"clam_av_alive"`
	}{}
	err := api.staticClamav.Ping()
	status.ClamAVAlive = err == nil
	err = api.staticDB.Ping(r.Context())
	status.DBAlive = err == nil
	skyapi.WriteJSON(w, status)
}

// scanPOST adds a new skylink to the scanning queue. If the skylink is already
// in the queue we respond with 200 OK but we don't add it again.
func (api *API) scanPOST(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	skylink, err := parseSkylink(ps.ByName("skylink"))
	if err != nil {
		skyapi.WriteError(w, skyapi.Error{err.Error()}, http.StatusBadRequest)
		return
	}
	err = api.staticDB.SkylinkCreate(r.Context(), skylink)
	if err != nil {
		skyapi.WriteError(w, skyapi.Error{err.Error()}, http.StatusInternalServerError)
		return
	}
	api.staticLogger.Debugf("Added skylink %s", skylink.Skylink)
	skyapi.WriteSuccess(w)
}

// parseSkylink parses the given string into a skylink and validates it.
func parseSkylink(s string) (*database.Skylink, error) {
	if s == "" {
		return nil, errors.New("empty skylink")
	}
	var sl database.Skylink
	err := sl.LoadString(s)
	if err != nil {
		return nil, err
	}
	return &sl, nil
}
