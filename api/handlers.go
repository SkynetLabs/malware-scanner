package api

import (
	"net/http"

	"github.com/SkynetLabs/malware-scanner/database"
	"github.com/julienschmidt/httprouter"
	"gitlab.com/NebulousLabs/errors"
	skyapi "gitlab.com/SkynetLabs/skyd/node/api"
)

type (
	// scanResponse is the response to scan requests
	scanResponse struct {
		Status string `json:"status"`
	}
)

// healthGET returns the status of the service
func (api *API) healthGET(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	status := struct {
		DBAlive     bool `json:"dbAlive"`
		ClamAVAlive bool `json:"clamAVAlive"`
	}{}
	err := api.staticClamAV.Ping()
	status.ClamAVAlive = err == nil
	err = api.staticDB.Ping(r.Context())
	status.DBAlive = err == nil
	skyapi.WriteJSON(w, status)
}

// scanPOST adds a new skylink to the scanning queue. If the skylink is already
// in the queue we respond with 200 OK but we don't add it again.
func (api *API) scanPOST(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	skylink, err := parseSkylink(ps.ByName("skylink"), api.staticClamAV.PreferredPortal())
	if err != nil {
		api.staticLogger.Debugf("scanPost failed with bad param: %s", err)
		skyapi.WriteError(w, skyapi.Error{err.Error()}, http.StatusBadRequest)
		return
	}
	api.staticLogger.Debugf("scanPost will add %s", skylink.Skylink)
	err = api.staticDB.SkylinkCreate(r.Context(), skylink)
	if errors.Contains(err, database.ErrSkylinkExists) {
		skyapi.WriteJSON(w, scanResponse{"duplicate"})
		return
	}
	if err != nil {
		api.staticLogger.Debugf("scanPost failed: %s", err)
		skyapi.WriteError(w, skyapi.Error{err.Error()}, http.StatusInternalServerError)
		return
	}
	skyapi.WriteJSON(w, scanResponse{"queued"})
}

// parseSkylink parses the given string into a skylink and validates it.
func parseSkylink(s, portal string) (*database.Skylink, error) {
	if s == "" {
		return nil, errors.New("empty skylink")
	}
	var sl database.Skylink
	err := sl.LoadString(s, portal)
	if err != nil {
		return nil, err
	}
	return &sl, nil
}
